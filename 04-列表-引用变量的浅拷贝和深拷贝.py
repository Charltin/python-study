# 列表是一种引用对象

# 1. 什么是引用对象
print('等号拷贝: ')
A = [1, 2, 3]
B = A
print('A: ', A, '-----', 'B:', B)
A[0] = 0
print( 'A: ', A, '-----', 'B:', B)
# 只改变了A的情况下B也被改变了，因为等号赋值的是在内存中的引用，实际上A和B在内存中指向的是同一个对象

# 2. 深拷贝和浅拷贝
# 浅拷贝
print('浅拷贝: ')
A = [1, 1, [1, 2, 3]]
B = A.copy() # 或使用切片: B = A[:]
A[1] = 0
print('A: ', A, '-----', 'B:', B)

# 浅拷贝只能拷贝一维列表，深层的引用还是相同的
A[2][1] = 0
print('A: ', A, '-----', 'B:', B)

# 深拷贝
import copy
print('深拷贝: ')
deep_A = [1, 1, [1, 2, 3]]
deep_B = copy.deepcopy(deep_A) # copy.copy(x)是浅拷贝
print(deep_B)

# 深拷贝不仅拷贝了对象，也拷贝了对象中的所有子对象 (但是深拷贝的效率不如浅拷贝)
deep_A[2][0] = 0
print('deep_A: ', deep_A, '-----', 'deep_B:', deep_B)
